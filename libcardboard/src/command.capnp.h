// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: command.capnp

#pragma once

#include <capnp/generated-header-support.h>
#include <kj/windows-sanity.h>

#if CAPNP_VERSION != 7000
#error "Version mismatch between generated code and library headers.  You must use the same version of the Cap'n Proto compiler and library."
#endif

namespace capnp {
namespace schemas {

    CAPNP_DECLARE_SCHEMA(c7d54a0a5b4f9a04);
    CAPNP_DECLARE_SCHEMA(df66638ce78b6636);
    enum class Commands_df66638ce78b6636 : uint16_t {
        QUIT,
        FOCUS,
        BIND,
        EXEC,
    };
    CAPNP_DECLARE_ENUM(Commands, df66638ce78b6636);
    CAPNP_DECLARE_SCHEMA(94226beee4060cbf);
    enum class FocusDirection_94226beee4060cbf : uint16_t {
        LEFT,
        RIGHT,
    };
    CAPNP_DECLARE_ENUM(FocusDirection, 94226beee4060cbf);
    CAPNP_DECLARE_SCHEMA(e76cd4609d0552d3);
    CAPNP_DECLARE_SCHEMA(c523e03fb47809a8);

} // namespace schemas
} // namespace capnp

namespace generated {

struct Command {
    Command() = delete;

    class Reader;
    class Builder;
    class Pipeline;
    typedef ::capnp::schemas::Commands_df66638ce78b6636 Commands;

    typedef ::capnp::schemas::FocusDirection_94226beee4060cbf FocusDirection;

    struct Bind;
    struct Arguments;

    struct _capnpPrivate {
        CAPNP_DECLARE_STRUCT_HEADER(c7d54a0a5b4f9a04, 1, 1)
#if !CAPNP_LITE
        static constexpr ::capnp::_::RawBrandedSchema const* brand()
        {
            return &schema->defaultBrand;
        }
#endif // !CAPNP_LITE
    };
};

struct Command::Bind {
    Bind() = delete;

    class Reader;
    class Builder;
    class Pipeline;

    struct _capnpPrivate {
        CAPNP_DECLARE_STRUCT_HEADER(e76cd4609d0552d3, 0, 3)
#if !CAPNP_LITE
        static constexpr ::capnp::_::RawBrandedSchema const* brand()
        {
            return &schema->defaultBrand;
        }
#endif // !CAPNP_LITE
    };
};

struct Command::Arguments {
    Arguments() = delete;

    class Reader;
    class Builder;
    class Pipeline;
    enum Which : uint16_t {
        FOCUS_DIRECTION,
        EXEC_COMMAND,
        BIND,
    };

    struct _capnpPrivate {
        CAPNP_DECLARE_STRUCT_HEADER(c523e03fb47809a8, 1, 1)
#if !CAPNP_LITE
        static constexpr ::capnp::_::RawBrandedSchema const* brand()
        {
            return &schema->defaultBrand;
        }
#endif // !CAPNP_LITE
    };
};

// =======================================================================================

class Command::Reader {
public:
    typedef Command Reads;

    Reader() = default;
    inline explicit Reader(::capnp::_::StructReader base)
        : _reader(base)
    {
    }

    inline ::capnp::MessageSize totalSize() const
    {
        return _reader.totalSize().asPublic();
    }

#if !CAPNP_LITE
    inline ::kj::StringTree toString() const
    {
        return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
    }
#endif // !CAPNP_LITE

    inline ::generated::Command::Commands getCommand() const;

    inline typename Arguments::Reader getArguments() const;

private:
    ::capnp::_::StructReader _reader;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::_::PointerHelpers;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::List;
    friend class ::capnp::MessageBuilder;
    friend class ::capnp::Orphanage;
};

class Command::Builder {
public:
    typedef Command Builds;

    Builder() = delete; // Deleted to discourage incorrect usage.
        // You can explicitly initialize to nullptr instead.
    inline Builder(decltype(nullptr)) {}
    inline explicit Builder(::capnp::_::StructBuilder base)
        : _builder(base)
    {
    }
    inline operator Reader() const { return Reader(_builder.asReader()); }
    inline Reader asReader() const { return *this; }

    inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
    inline ::kj::StringTree toString() const
    {
        return asReader().toString();
    }
#endif // !CAPNP_LITE

    inline ::generated::Command::Commands getCommand();
    inline void setCommand(::generated::Command::Commands value);

    inline typename Arguments::Builder getArguments();
    inline typename Arguments::Builder initArguments();

private:
    ::capnp::_::StructBuilder _builder;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
    friend class ::capnp::Orphanage;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Command::Pipeline {
public:
    typedef Command Pipelines;

    inline Pipeline(decltype(nullptr))
        : _typeless(nullptr)
    {
    }
    inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
        : _typeless(kj::mv(typeless))
    {
    }

    inline typename Arguments::Pipeline getArguments();

private:
    ::capnp::AnyPointer::Pipeline _typeless;
    friend class ::capnp::PipelineHook;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Command::Bind::Reader {
public:
    typedef Bind Reads;

    Reader() = default;
    inline explicit Reader(::capnp::_::StructReader base)
        : _reader(base)
    {
    }

    inline ::capnp::MessageSize totalSize() const
    {
        return _reader.totalSize().asPublic();
    }

#if !CAPNP_LITE
    inline ::kj::StringTree toString() const
    {
        return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
    }
#endif // !CAPNP_LITE

    inline bool hasModifiers() const;
    inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader getModifiers() const;

    inline bool hasKey() const;
    inline ::capnp::Text::Reader getKey() const;

    inline bool hasCommand() const;
    inline ::generated::Command::Reader getCommand() const;

private:
    ::capnp::_::StructReader _reader;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::_::PointerHelpers;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::List;
    friend class ::capnp::MessageBuilder;
    friend class ::capnp::Orphanage;
};

class Command::Bind::Builder {
public:
    typedef Bind Builds;

    Builder() = delete; // Deleted to discourage incorrect usage.
        // You can explicitly initialize to nullptr instead.
    inline Builder(decltype(nullptr)) {}
    inline explicit Builder(::capnp::_::StructBuilder base)
        : _builder(base)
    {
    }
    inline operator Reader() const { return Reader(_builder.asReader()); }
    inline Reader asReader() const { return *this; }

    inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
    inline ::kj::StringTree toString() const
    {
        return asReader().toString();
    }
#endif // !CAPNP_LITE

    inline bool hasModifiers();
    inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder getModifiers();
    inline void setModifiers(::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
    inline void setModifiers(::kj::ArrayPtr<const ::capnp::Text::Reader> value);
    inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder initModifiers(unsigned int size);
    inline void adoptModifiers(::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&& value);
    inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>> disownModifiers();

    inline bool hasKey();
    inline ::capnp::Text::Builder getKey();
    inline void setKey(::capnp::Text::Reader value);
    inline ::capnp::Text::Builder initKey(unsigned int size);
    inline void adoptKey(::capnp::Orphan<::capnp::Text>&& value);
    inline ::capnp::Orphan<::capnp::Text> disownKey();

    inline bool hasCommand();
    inline ::generated::Command::Builder getCommand();
    inline void setCommand(::generated::Command::Reader value);
    inline ::generated::Command::Builder initCommand();
    inline void adoptCommand(::capnp::Orphan<::generated::Command>&& value);
    inline ::capnp::Orphan<::generated::Command> disownCommand();

private:
    ::capnp::_::StructBuilder _builder;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
    friend class ::capnp::Orphanage;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Command::Bind::Pipeline {
public:
    typedef Bind Pipelines;

    inline Pipeline(decltype(nullptr))
        : _typeless(nullptr)
    {
    }
    inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
        : _typeless(kj::mv(typeless))
    {
    }

    inline ::generated::Command::Pipeline getCommand();

private:
    ::capnp::AnyPointer::Pipeline _typeless;
    friend class ::capnp::PipelineHook;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

class Command::Arguments::Reader {
public:
    typedef Arguments Reads;

    Reader() = default;
    inline explicit Reader(::capnp::_::StructReader base)
        : _reader(base)
    {
    }

    inline ::capnp::MessageSize totalSize() const
    {
        return _reader.totalSize().asPublic();
    }

#if !CAPNP_LITE
    inline ::kj::StringTree toString() const
    {
        return ::capnp::_::structString(_reader, *_capnpPrivate::brand());
    }
#endif // !CAPNP_LITE

    inline Which which() const;
    inline bool isFocusDirection() const;
    inline ::generated::Command::FocusDirection getFocusDirection() const;

    inline bool isExecCommand() const;
    inline bool hasExecCommand() const;
    inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader getExecCommand() const;

    inline bool isBind() const;
    inline bool hasBind() const;
    inline ::generated::Command::Bind::Reader getBind() const;

private:
    ::capnp::_::StructReader _reader;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::_::PointerHelpers;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::List;
    friend class ::capnp::MessageBuilder;
    friend class ::capnp::Orphanage;
};

class Command::Arguments::Builder {
public:
    typedef Arguments Builds;

    Builder() = delete; // Deleted to discourage incorrect usage.
        // You can explicitly initialize to nullptr instead.
    inline Builder(decltype(nullptr)) {}
    inline explicit Builder(::capnp::_::StructBuilder base)
        : _builder(base)
    {
    }
    inline operator Reader() const { return Reader(_builder.asReader()); }
    inline Reader asReader() const { return *this; }

    inline ::capnp::MessageSize totalSize() const { return asReader().totalSize(); }
#if !CAPNP_LITE
    inline ::kj::StringTree toString() const
    {
        return asReader().toString();
    }
#endif // !CAPNP_LITE

    inline Which which();
    inline bool isFocusDirection();
    inline ::generated::Command::FocusDirection getFocusDirection();
    inline void setFocusDirection(::generated::Command::FocusDirection value);

    inline bool isExecCommand();
    inline bool hasExecCommand();
    inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder getExecCommand();
    inline void setExecCommand(::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value);
    inline void setExecCommand(::kj::ArrayPtr<const ::capnp::Text::Reader> value);
    inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder initExecCommand(unsigned int size);
    inline void adoptExecCommand(::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&& value);
    inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>> disownExecCommand();

    inline bool isBind();
    inline bool hasBind();
    inline ::generated::Command::Bind::Builder getBind();
    inline void setBind(::generated::Command::Bind::Reader value);
    inline ::generated::Command::Bind::Builder initBind();
    inline void adoptBind(::capnp::Orphan<::generated::Command::Bind>&& value);
    inline ::capnp::Orphan<::generated::Command::Bind> disownBind();

private:
    ::capnp::_::StructBuilder _builder;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
    friend class ::capnp::Orphanage;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::_::PointerHelpers;
};

#if !CAPNP_LITE
class Command::Arguments::Pipeline {
public:
    typedef Arguments Pipelines;

    inline Pipeline(decltype(nullptr))
        : _typeless(nullptr)
    {
    }
    inline explicit Pipeline(::capnp::AnyPointer::Pipeline&& typeless)
        : _typeless(kj::mv(typeless))
    {
    }

private:
    ::capnp::AnyPointer::Pipeline _typeless;
    friend class ::capnp::PipelineHook;
    template <typename, ::capnp::Kind>
    friend struct ::capnp::ToDynamic_;
};
#endif // !CAPNP_LITE

// =======================================================================================

inline ::generated::Command::Commands Command::Reader::getCommand() const
{
    return _reader.getDataField<::generated::Command::Commands>(
        ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}

inline ::generated::Command::Commands Command::Builder::getCommand()
{
    return _builder.getDataField<::generated::Command::Commands>(
        ::capnp::bounded<0>() * ::capnp::ELEMENTS);
}
inline void Command::Builder::setCommand(::generated::Command::Commands value)
{
    _builder.setDataField<::generated::Command::Commands>(
        ::capnp::bounded<0>() * ::capnp::ELEMENTS, value);
}

inline typename Command::Arguments::Reader Command::Reader::getArguments() const
{
    return typename Command::Arguments::Reader(_reader);
}
inline typename Command::Arguments::Builder Command::Builder::getArguments()
{
    return typename Command::Arguments::Builder(_builder);
}
#if !CAPNP_LITE
inline typename Command::Arguments::Pipeline Command::Pipeline::getArguments()
{
    return typename Command::Arguments::Pipeline(_typeless.noop());
}
#endif // !CAPNP_LITE
inline typename Command::Arguments::Builder Command::Builder::initArguments()
{
    _builder.setDataField<::uint16_t>(::capnp::bounded<1>() * ::capnp::ELEMENTS, 0);
    _builder.setDataField<::uint16_t>(::capnp::bounded<2>() * ::capnp::ELEMENTS, 0);
    _builder.getPointerField(::capnp::bounded<0>() * ::capnp::POINTERS).clear();
    return typename Command::Arguments::Builder(_builder);
}
inline bool Command::Bind::Reader::hasModifiers() const
{
    return !_reader.getPointerField(
                       ::capnp::bounded<0>() * ::capnp::POINTERS)
                .isNull();
}
inline bool Command::Bind::Builder::hasModifiers()
{
    return !_builder.getPointerField(
                        ::capnp::bounded<0>() * ::capnp::POINTERS)
                .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader Command::Bind::Reader::getModifiers() const
{
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder Command::Bind::Builder::getModifiers()
{
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Command::Bind::Builder::setModifiers(::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value)
{
    ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
                                                                                           ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                       value);
}
inline void Command::Bind::Builder::setModifiers(::kj::ArrayPtr<const ::capnp::Text::Reader> value)
{
    ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
                                                                                           ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                       value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder Command::Bind::Builder::initModifiers(unsigned int size)
{
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
                                                                                                   ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                               size);
}
inline void Command::Bind::Builder::adoptModifiers(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&& value)
{
    ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
                                                                                             ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                         kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>> Command::Bind::Builder::disownModifiers()
{
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Command::Bind::Reader::hasKey() const
{
    return !_reader.getPointerField(
                       ::capnp::bounded<1>() * ::capnp::POINTERS)
                .isNull();
}
inline bool Command::Bind::Builder::hasKey()
{
    return !_builder.getPointerField(
                        ::capnp::bounded<1>() * ::capnp::POINTERS)
                .isNull();
}
inline ::capnp::Text::Reader Command::Bind::Reader::getKey() const
{
    return ::capnp::_::PointerHelpers<::capnp::Text>::get(_reader.getPointerField(
        ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline ::capnp::Text::Builder Command::Bind::Builder::getKey()
{
    return ::capnp::_::PointerHelpers<::capnp::Text>::get(_builder.getPointerField(
        ::capnp::bounded<1>() * ::capnp::POINTERS));
}
inline void Command::Bind::Builder::setKey(::capnp::Text::Reader value)
{
    ::capnp::_::PointerHelpers<::capnp::Text>::set(_builder.getPointerField(
                                                       ::capnp::bounded<1>() * ::capnp::POINTERS),
                                                   value);
}
inline ::capnp::Text::Builder Command::Bind::Builder::initKey(unsigned int size)
{
    return ::capnp::_::PointerHelpers<::capnp::Text>::init(_builder.getPointerField(
                                                               ::capnp::bounded<1>() * ::capnp::POINTERS),
                                                           size);
}
inline void Command::Bind::Builder::adoptKey(
    ::capnp::Orphan<::capnp::Text>&& value)
{
    ::capnp::_::PointerHelpers<::capnp::Text>::adopt(_builder.getPointerField(
                                                         ::capnp::bounded<1>() * ::capnp::POINTERS),
                                                     kj::mv(value));
}
inline ::capnp::Orphan<::capnp::Text> Command::Bind::Builder::disownKey()
{
    return ::capnp::_::PointerHelpers<::capnp::Text>::disown(_builder.getPointerField(
        ::capnp::bounded<1>() * ::capnp::POINTERS));
}

inline bool Command::Bind::Reader::hasCommand() const
{
    return !_reader.getPointerField(
                       ::capnp::bounded<2>() * ::capnp::POINTERS)
                .isNull();
}
inline bool Command::Bind::Builder::hasCommand()
{
    return !_builder.getPointerField(
                        ::capnp::bounded<2>() * ::capnp::POINTERS)
                .isNull();
}
inline ::generated::Command::Reader Command::Bind::Reader::getCommand() const
{
    return ::capnp::_::PointerHelpers<::generated::Command>::get(_reader.getPointerField(
        ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline ::generated::Command::Builder Command::Bind::Builder::getCommand()
{
    return ::capnp::_::PointerHelpers<::generated::Command>::get(_builder.getPointerField(
        ::capnp::bounded<2>() * ::capnp::POINTERS));
}
#if !CAPNP_LITE
inline ::generated::Command::Pipeline Command::Bind::Pipeline::getCommand()
{
    return ::generated::Command::Pipeline(_typeless.getPointerField(2));
}
#endif // !CAPNP_LITE
inline void Command::Bind::Builder::setCommand(::generated::Command::Reader value)
{
    ::capnp::_::PointerHelpers<::generated::Command>::set(_builder.getPointerField(
                                                              ::capnp::bounded<2>() * ::capnp::POINTERS),
                                                          value);
}
inline ::generated::Command::Builder Command::Bind::Builder::initCommand()
{
    return ::capnp::_::PointerHelpers<::generated::Command>::init(_builder.getPointerField(
        ::capnp::bounded<2>() * ::capnp::POINTERS));
}
inline void Command::Bind::Builder::adoptCommand(
    ::capnp::Orphan<::generated::Command>&& value)
{
    ::capnp::_::PointerHelpers<::generated::Command>::adopt(_builder.getPointerField(
                                                                ::capnp::bounded<2>() * ::capnp::POINTERS),
                                                            kj::mv(value));
}
inline ::capnp::Orphan<::generated::Command> Command::Bind::Builder::disownCommand()
{
    return ::capnp::_::PointerHelpers<::generated::Command>::disown(_builder.getPointerField(
        ::capnp::bounded<2>() * ::capnp::POINTERS));
}

inline ::generated::Command::Arguments::Which Command::Arguments::Reader::which() const
{
    return _reader.getDataField<Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}
inline ::generated::Command::Arguments::Which Command::Arguments::Builder::which()
{
    return _builder.getDataField<Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS);
}

inline bool Command::Arguments::Reader::isFocusDirection() const
{
    return which() == Command::Arguments::FOCUS_DIRECTION;
}
inline bool Command::Arguments::Builder::isFocusDirection()
{
    return which() == Command::Arguments::FOCUS_DIRECTION;
}
inline ::generated::Command::FocusDirection Command::Arguments::Reader::getFocusDirection() const
{
    KJ_IREQUIRE((which() == Command::Arguments::FOCUS_DIRECTION),
                "Must check which() before get()ing a union member.");
    return _reader.getDataField<::generated::Command::FocusDirection>(
        ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}

inline ::generated::Command::FocusDirection Command::Arguments::Builder::getFocusDirection()
{
    KJ_IREQUIRE((which() == Command::Arguments::FOCUS_DIRECTION),
                "Must check which() before get()ing a union member.");
    return _builder.getDataField<::generated::Command::FocusDirection>(
        ::capnp::bounded<1>() * ::capnp::ELEMENTS);
}
inline void Command::Arguments::Builder::setFocusDirection(::generated::Command::FocusDirection value)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::FOCUS_DIRECTION);
    _builder.setDataField<::generated::Command::FocusDirection>(
        ::capnp::bounded<1>() * ::capnp::ELEMENTS, value);
}

inline bool Command::Arguments::Reader::isExecCommand() const
{
    return which() == Command::Arguments::EXEC_COMMAND;
}
inline bool Command::Arguments::Builder::isExecCommand()
{
    return which() == Command::Arguments::EXEC_COMMAND;
}
inline bool Command::Arguments::Reader::hasExecCommand() const
{
    if (which() != Command::Arguments::EXEC_COMMAND)
        return false;
    return !_reader.getPointerField(
                       ::capnp::bounded<0>() * ::capnp::POINTERS)
                .isNull();
}
inline bool Command::Arguments::Builder::hasExecCommand()
{
    if (which() != Command::Arguments::EXEC_COMMAND)
        return false;
    return !_builder.getPointerField(
                        ::capnp::bounded<0>() * ::capnp::POINTERS)
                .isNull();
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader Command::Arguments::Reader::getExecCommand() const
{
    KJ_IREQUIRE((which() == Command::Arguments::EXEC_COMMAND),
                "Must check which() before get()ing a union member.");
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(_reader.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder Command::Arguments::Builder::getExecCommand()
{
    KJ_IREQUIRE((which() == Command::Arguments::EXEC_COMMAND),
                "Must check which() before get()ing a union member.");
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::get(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Command::Arguments::Builder::setExecCommand(::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Reader value)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::EXEC_COMMAND);
    ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
                                                                                           ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                       value);
}
inline void Command::Arguments::Builder::setExecCommand(::kj::ArrayPtr<const ::capnp::Text::Reader> value)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::EXEC_COMMAND);
    ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::set(_builder.getPointerField(
                                                                                           ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                       value);
}
inline ::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>::Builder Command::Arguments::Builder::initExecCommand(unsigned int size)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::EXEC_COMMAND);
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::init(_builder.getPointerField(
                                                                                                   ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                               size);
}
inline void Command::Arguments::Builder::adoptExecCommand(
    ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>&& value)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::EXEC_COMMAND);
    ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::adopt(_builder.getPointerField(
                                                                                             ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                                         kj::mv(value));
}
inline ::capnp::Orphan<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>> Command::Arguments::Builder::disownExecCommand()
{
    KJ_IREQUIRE((which() == Command::Arguments::EXEC_COMMAND),
                "Must check which() before get()ing a union member.");
    return ::capnp::_::PointerHelpers<::capnp::List<::capnp::Text, ::capnp::Kind::BLOB>>::disown(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}

inline bool Command::Arguments::Reader::isBind() const
{
    return which() == Command::Arguments::BIND;
}
inline bool Command::Arguments::Builder::isBind()
{
    return which() == Command::Arguments::BIND;
}
inline bool Command::Arguments::Reader::hasBind() const
{
    if (which() != Command::Arguments::BIND)
        return false;
    return !_reader.getPointerField(
                       ::capnp::bounded<0>() * ::capnp::POINTERS)
                .isNull();
}
inline bool Command::Arguments::Builder::hasBind()
{
    if (which() != Command::Arguments::BIND)
        return false;
    return !_builder.getPointerField(
                        ::capnp::bounded<0>() * ::capnp::POINTERS)
                .isNull();
}
inline ::generated::Command::Bind::Reader Command::Arguments::Reader::getBind() const
{
    KJ_IREQUIRE((which() == Command::Arguments::BIND),
                "Must check which() before get()ing a union member.");
    return ::capnp::_::PointerHelpers<::generated::Command::Bind>::get(_reader.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline ::generated::Command::Bind::Builder Command::Arguments::Builder::getBind()
{
    KJ_IREQUIRE((which() == Command::Arguments::BIND),
                "Must check which() before get()ing a union member.");
    return ::capnp::_::PointerHelpers<::generated::Command::Bind>::get(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Command::Arguments::Builder::setBind(::generated::Command::Bind::Reader value)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::BIND);
    ::capnp::_::PointerHelpers<::generated::Command::Bind>::set(_builder.getPointerField(
                                                                    ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                value);
}
inline ::generated::Command::Bind::Builder Command::Arguments::Builder::initBind()
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::BIND);
    return ::capnp::_::PointerHelpers<::generated::Command::Bind>::init(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}
inline void Command::Arguments::Builder::adoptBind(
    ::capnp::Orphan<::generated::Command::Bind>&& value)
{
    _builder.setDataField<Command::Arguments::Which>(
        ::capnp::bounded<2>() * ::capnp::ELEMENTS, Command::Arguments::BIND);
    ::capnp::_::PointerHelpers<::generated::Command::Bind>::adopt(_builder.getPointerField(
                                                                      ::capnp::bounded<0>() * ::capnp::POINTERS),
                                                                  kj::mv(value));
}
inline ::capnp::Orphan<::generated::Command::Bind> Command::Arguments::Builder::disownBind()
{
    KJ_IREQUIRE((which() == Command::Arguments::BIND),
                "Must check which() before get()ing a union member.");
    return ::capnp::_::PointerHelpers<::generated::Command::Bind>::disown(_builder.getPointerField(
        ::capnp::bounded<0>() * ::capnp::POINTERS));
}

} // namespace
